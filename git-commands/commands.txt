-------------git config--------------
$ git config --global user.name "akshaykumart"
$ git config --global user.email "akshaykumarhm5@gmail.com"
-----------------------------------------------------------------------------
$ git init
$ git clone <repo-url>
$ git branch   //verify
$ git checkout main
$ git pull
$ git branch <new branch>      //create a new branch
$ git checkout <new branch>
$ git branch   //verify
$ vi athleteupStageFeAppBuildDeploy.groovy    //create a new file
$ ls  //verify new file
$ git status
$ git add .
$ git commit -m "commit message"
$ git push --set-upstream origin <new branch>

-----------------remove files from staging area----------------
$ git restore --staged file_name

-----------------find changes-------------
$ git diff            //compares changes btw working dir and staging area
$ git diff --stage    //compares changes btw last commit and staging area

----------clone the repository-----------
$ git init
$ git clone <repo_URL>

----------push the code to main/master branch----------

$ git init -b main
$ git add .
$ git commit -m "commit msg"
$ git remote add origin <remote_URL>
$ git remote -v
$ git push --set-upstream origin main
	username: <username>
	password: <PAT Token>
	
----------create a new branch----------

$ git checkout -b <new_branch_name> 
$ git branch   //verify
   
         (or)
         
$ git branch <new branch name>                       //to create a new branch
$ git checkout <new branch name>                     //to get into the branch
$ git branch -d <branch_name>                        //to delete the branch

----------push the code to new branch---------------

$ git add .
$ git commit -m "commit msg"
$ git remote add origin <remote_URL>
$ git remote -v
$ git push origin new_branch
	username: <username>
	password: <PAT Token>

----------To add the changes into the master----------

$ git checkout master
$ git merge <new_branch>

----------To change a commit message-------------

$ git commit --amend
$ git push --force-with-lease origin EXAMPLE-BRANCH

----------Squash commit messages-----------

$ git rebase -i HEAD~n
$ git push --force origin EXAMPLE-BRANCH

-------------pull------------

$ git config --global pull.ff only
$ git pull --rebase origin main

-------------delete files using git command-----------------
$ git rm 1.txt
$ git status             //verify

-------------rename the file using git command--------------
$ git mv 1.txt 1_new.txt
$ git status            //verify

-------------untrack files---------------------
$ git rm --cached 1.txt
$ git status        
$ git commit -m "removed file from tracking"

-------------view commits hash---------------
$ git log
$ git log -p      //view log along with the changes made
$ git log -p -3   //view only 3 latest log along with chanes made
$ git log --pretty=oneline     //prints commit hash in single line

-------------stash----------------

$ git stash                        //stash or selves the changes made to stash
$ git stash -u                     //stashes untracked files/new files to stash
$ git stash save "message"         //stashes with a message
$ git stash list                   //shows the stash list
$ git stash pop                    //removes stash to working dir
$ git stash apply                  //keep stash and get into the working dir
$ git stash drop stash@{1}         //deletes the particular stash
$ git stash clear                  //deletes all stashs

----------accidentaly if u delete any content from file in working dir , if u want to restore it with previous commit-------
$ git checkout -- filename                             //for one file
$ git checkout -f                                      //for multiple files

